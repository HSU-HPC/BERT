"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R"
)
library(HarmonizR)
data <- read.csv(file = "C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/Data/Petralia/petralia.csv", row.names=1, header=TRUE)
asw_raw = compute_asw(data)
data_adjusted <- data.frame(data);
data_adjusted["Cov_1"] = data_adjusted[["Label"]]
View(data_adjusted)
source("~/PhD/HierarchyBEs/Tests/Petralia/first_test_petralia.R", echo=TRUE)
View(asw_bert_cov)
source("~/PhD/HierarchyBEs/Tests/BRCA/first_test_BRCA.R", echo=TRUE)
View(asw_bert_cov)
data("pbmc_small")
library("seurat")
library(seurat)
source("~/PhD/HierarchyBEs/Tests/Petralia/first_test_petralia.R", echo=TRUE)
asw_limma
source("~/PhD/HierarchyBEs/Tests/BRCA/first_test_BRCA.R", echo=TRUE)
asw_bert
asw_limma
matrix(1,5,1)
matrix(1,5,1)[1]
as.factor(c(1,1,2,2))
batch <- as.factor(c(1,1,2,2))
contrasts(batch)
contr.sum(levels(batch))
contrasts(batch) <- contr.sum(levels(batch))
batch
model.matrix(~batch)
model.matrix(~batch)[,-1,drop=FALSE]
batch <- model.matrix(~batch)[,-1,drop=FALSE]
matrix(1,4,1)
design <- matrix(1,4,1)
cbind(design, batch)
y <- matrix(rnorm(10*9),10,9)
y[,1:3] <- y[,1:3] + 5
batch <- c("A","A","A","B","B","B","C","C","C")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch <- as.factor(batch)
batch
contr.sum(levels(batch))
contrasts(batch) <- contr.sum(levels(batch))
batch
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
matrix(1,ncol(y),1)
design <- matrix(1,ncol(y),1)
x
y
lmFit(y, cbind(design, batch))
y <- matrix(rnorm(10*9),10,9)
y[,1:3] <- y[,1:3] + 5
batch <- c("A","A","A","B","B","B","C","C","C")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
lmFit(y, cbind(design, batch))
fit <- lmFit(y, cbind(design, batch))
fit$coefficients
fit$coefficients[, -(1:ncol(matrix(1,ncol(x),1))), drop=FALSE]
fit$coefficients[, -(1:ncol(matrix(1,ncol(y),1))), drop=FALSE]
beta <- fit$coefficients[, -(1:ncol(matrix(1,ncol(y),1))), drop=FALSE]
beta %*% t(batch)
batch <- c("A","A","A","B","B","B","C","C","C")
batch
batch <- as.factor(batch)
batch
contrasts(batch) <- contr.sum(levels(batch))
batch
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
batch <- c("A","A","A","B","B","B","C","C","C", "D", "D", "D")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
beta
source("~/PhD/HierarchyBEs/Study/BulkExpression/ovarian_analysis.R", echo=TRUE)
data["Label"]
source("~/PhD/HierarchyBEs/Study/BulkExpression/ovarian_analysis.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/BERT/BERT")
usethis::use_testthat(3)
devtools::test()
devtools::test()
y <- matrix(rnorm(10*9),9,10)
y
y[1:3,] <- y[1:3,] + 5
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y
y <- matrix(rnorm(10*9),9,10)
y
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
devtools::load_all()
y_adjusted <- hierarchical_adjustment(y, method=NULL)
y_adjusted <- hierarchical_adjustment(y, method="None")
devtools::check()
devtools::check()
devtools::test()
y
as.matrix(a)
as.matrix(y)
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()#
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y_adjusted_mat <- hierarchical_adjustment(as.matrix(y), method="None")
devtools::load_all()
y_adjusted_mat <- hierarchical_adjustment(as.matrix(y), method="None")
as.matrix(y)["Batch"]
as.matrix(y)
as.matrix(y)[,"Batch"]
y[,"Batch"]
devtools::load_all()
y_adjusted_mat <- hierarchical_adjustment(as.matrix(y), method="None")
devtools::load_all()
y_adjusted_mat <- hierarchical_adjustment(as.matrix(y), method="None")
devtools::test()
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[1:2,1] = NA
y
data <- y
unique_batches <- unique(data["Batch"])
unique_batches
b = 1
data_batch <- data[data["Batch"] == b,]
data_batch
adjustable_batch <- get_adjustable_features(data_batch)
get_adjustable_features()
get_adjustable_features(data_batch)
data[data["Batch"] == b, !adjustable_batch]
devtools::load_all()
devtools::test()
data[data["Batch"] == b, !adjustable_batch] <- NA
data
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[1:2,1] = NA
y_formatted <- format_DF(y)
y_formatted
y
devtools::check()
all.equal(c(FALSE, TRUE), c(TRUE, TRUE))
all.equal(c(FALSE, TRUE), c(FALSE, TRUE))
devtools::load()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),3,5)
y[1,1] <- NA
y[1:3, 2] <- NA
y[1:2, 3] <- NA
y
y <- data.frame(y)
y
get_adjustable_features(y)
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),3,5)
y[1,1] <- NA
y[1:3, 2] <- NA
y[1:2, 3] <- NA
# BERT typecasts to dataframe
y <- data.frame(y)
devtools::load_all()
devtools::test()
get_adjustable_features(y)
all.equal(get_adjustable_features(y), c(TRUE, FALSE, FALSE, TRUE, TRUE))
get_adjustable_features(y)
as.vector(get_adjustable_features(y))
devtools::load_all()
devtools::test()
y
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[1:2,1] = NA
y
data <- y
unique_batches <- unique(data["Batch"])
for(b in unique_batches){
# data from batch b
data_batch <- data[data["Batch"] == b,]
# logical with the features that can be adjusted (that is, contain more
# than 2 numeric values in this batch)
adjustable_batch <- get_adjustable_features(data_batch)
# set features from this batch to missing, where adjustable_batch is FALSE
data[data["Batch"] == b, !adjustable_batch] <- NA
}
data
y
y
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
data
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data %>% janitor::remove_empty(c("rows", "cols"))
data
inital_mvs <- sum(is.na(data))
logging::loginfo(paste("Found ", inital_mvs, " missing values."))
unique_batches <- unique(data["Batch"])
b = 1
data_batch <- data[data["Batch"] == b,]
data_batch
adjustable_batch <- get_adjustable_features(data_batch)
adjustable_batch
data[data["Batch"] == b, !adjustable_batch]
data[data["Batch"] == b, !adjustable_batch] <- NA
data
final_mvs <- sum(is.na(data))
logging::loginfo(paste("Introduced ", final_mvs-inital_mvs, " missing values due to singular proteins in batches."))
logging::loginfo("Done")
devtools::load_all()
devtools::test()
format_DF <- function(data){
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data %>% janitor::remove_empty(c("rows", "cols"))
# count number of missing values
inital_mvs <- sum(is.na(data))
logging::loginfo(paste("Found ", inital_mvs, " missing values."))
# all unique batch levels
unique_batches <- unique(data["Batch"])
# iterate over batches and remove numeric values, if a feature (e.g. protein)
# does not contain at least 2 numeric values
for(b in unique_batches){
# data from batch b
data_batch <- data[data["Batch"] == b,]
# logical with the features that can be adjusted (that is, contain more
# than 2 numeric values in this batch)
adjustable_batch <- get_adjustable_features(data_batch)
# set features from this batch to missing, where adjustable_batch is FALSE
data[data["Batch"] == b, !adjustable_batch] <- NA
}
# count missing values
final_mvs <- sum(is.na(data))
logging::loginfo(paste("Introduced ", final_mvs-inital_mvs, " missing values due to singular proteins in batches."))
logging::loginfo("Done")
return(data)
}
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[1:2,1] = NA
format_DF(y)
format_DF(data.frame(y))
y
data <- data.frame
data <- data.frame(y)
data
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data %>% janitor::remove_empty(c("rows", "cols"))
# count number of missing values
inital_mvs <- sum(is.na(data))
logging::loginfo(paste("Found ", inital_mvs, " missing values."))
# all unique batch levels
unique_batches <- unique(data["Batch"])
# iterate over batches and remove numeric values, if a feature (e.g. protein)
# does not contain at least 2 numeric values
for(b in unique_batches){
# data from batch b
data_batch <- data[data["Batch"] == b,]
# logical with the features that can be adjusted (that is, contain more
# than 2 numeric values in this batch)
adjustable_batch <- get_adjustable_features(data_batch)
# set features from this batch to missing, where adjustable_batch is FALSE
data[data["Batch"] == b, !adjustable_batch] <- NA
}
# count missing values
final_mvs <- sum(is.na(data))
logging::loginfo(paste("Introduced ", final_mvs-inital_mvs, " missing values due to singular proteins in batches."))
logging::loginfo("Done")
data
# generate dataset, 9 samples, 10 features
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[1:2,1] = NA
y_formatted <- format_DF(y)
y
data <- y
data <- data.frame(y)
data %>% janitor::remove_empty(c("rows", "cols"))
data
inital_mvs <- sum(is.na(data))
unique_batches <- unique(data["Batch"])
unique_batches
b = 1
unique_batches <- unique(data[["Batch"]])
unique_batches
b = 1
data_batch <- data[data["Batch"] == b,]
data:batch
data_batch
adjustable_batch <- get_adjustable_features(data_batch)
adjustable_batch
data[data["Batch"] == b, !adjustable_batch] <- NA
data
devtools::load_all()
devtools::test()
y
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
# make first feature unadjustable in batch 1
y[,1] = NA
y
data <- data.frame(y)
data
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data %>% janitor::remove_empty(c("rows", "cols"))
data
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data <- data %>% janitor::remove_empty(c("rows", "cols"))
data
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*9),3,5)
y[1,1] <- NA
y[1:3, 2] <- NA
y[1:2, 3] <- NA
# BERT typecasts to dataframe
y <- data.frame(y)
y2 <- data.frame(y)
y2["Batch"] = 1
y2["Label"] = 2
y2["Cov_1"] = 4
y2["Cov_2"] = 20
y
y2
compute_asw(y)
dataset <- y
dataset_nocov <- dataset [ , !grepl( "Cov" , names( dataset  ) ) ]
dataset_nocov
devtools:load_all()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
names(y)
"X1" %in% names(y)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::check()
?rnorm
devtools::check()
?as.factor
factor(x=c("A","A","B","B"))
factor(x=c("A","A","B","B"))
devtools::load_all()
devtools::test()
y <- matrix(rnorm(10*6),6,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2)
rownames(y)
mod = data.frame(Cov_1 = integer())
mod
mod = data.frame(Cov_1 = integer(), row.names = c("A","B"))
matrix(NA, nrows=1, ncols=0)
matrix(NA, nrow=1, ncol=0)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
x <- factor(c("A","A","B","B"))
x
unclass(x)
unclass(x)[1]
unclass(x)
y
set.seed(3221)  # this makes the example exactly reproducible
my.data <- data.frame(y=rnorm(5),
x1=c(1:5),
x2=c(TRUE, TRUE, FALSE, FALSE, FALSE),
X3=letters[1:5])
my.data
typeof(my.data["x1"])
sapply(my.data, typeof)
as.vector(sapply(my.data, typeof))
sapply(as.vector(sapply(my.data, typeof)), is.integer)
y <- matrix(rnorm(10*6),6,10)
y <- data.frame(y)
y["Batch"] <- c("A","A","A","B","B","B")
y
