dim(mod)
mod==u
mod==uniques[1]
mod
mod==1
uniques
uniques[1]
uniques[1,]
uniques[2,]
mod["Cov_2"] = mod["Cov_1"]
u_idx = 1
data_batch[t(mod_batch)==uniques[1,],]
mat[t(mod_batch)==uniques[1,],]
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat["Cov_2"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[1,1] <- NA
mod <- data.frame(mat [ , grepl( "Cov" , names( mat  ) ) ])
mat <- mat [ , !grepl( "Cov" , names( mat  ) ) ]
data_batch <- mat
mod_batch <- mod
uniques <- unique(mod_batch)
uniques
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
available_features
data_batch[t(mod_batch)==u,]
u = uniques[1]
u
uniques
u_idx  = 1
u <- uniques[u_idx, ]
u
data_batch[t(mod_batch)==u,]
t(mod_batch)==u
mod_batch
u
mod_batch==u
u==t(mod_batch)
apply(data_batch, 1, function(x, y) all.equal(x,y), u)
apply(data_batch, 1, function(x, y) x==y, u)
apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor
apply(cor, 2, &)
?reduce
?Reduce
Reduce(&, cor)
Reduce("&", cor)
apply(cor, 1, function(x) Reduce("&", x))
apply(cor, 2, function(x) Reduce("&", x))
u
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
cor
available_data <- !is.na(data_batch[cor,])
available_data
available_features <- get_adjustable_features(data_batch[cor,])
available_features
available_features <- available_features & get_adjustable_features(data_batch[cor,])
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(unique)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
# apply normal function
available_features <- available_features & get_adjustable_features(data_batch[cor,])
}
available_features
uniques(mod_batch)
unique(mod_batch)
u_idx <- 2
u <- uniques[u_idx, ]
u
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
cor
data_batch[cor,]
data_batch
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat["Cov_2"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
mod <- data.frame(mat [ , grepl( "Cov" , names( mat  ) ) ])
mat <- mat [ , !grepl( "Cov" , names( mat  ) ) ]
get_adjustable_features_with_mod(mat, mod)
as.vector(get_adjustable_features_with_mod(mat, mod))
data_batch <- mat
mod
mod_batch <- mod
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(unique)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
#
print(get_adjustable_features(data_batch[cor,]))
# apply normal function
available_features <- available_features
}
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(unique)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
print(u)
print(get_adjustable_features(data_batch[cor,]))
# apply normal function
available_features <- available_features
}
unique
devtools::load_all()
devtools::test()
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(uniques)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
print(u)
print(get_adjustable_features(data_batch[cor,]))
# apply normal function
available_features <- available_features
}
devtools::load_all()
devtools::test()
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(uniques)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor <- apply(cor, 2, function(x) Reduce("&", x))
# apply normal function
available_features <- available_features & get_adjustable_features(data_batch[cor,])
}
available_features
adjustable <- c(FALSE, TRUE, TRUE, TRUE, TRUE)
adjustable
devtools::load-
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
mod <- data.frame(mat [ , grepl( "Cov" , names( mat  ) ) ])
mat <- mat [ , !grepl( "Cov" , names( mat  ) ) ]
mod
mat
data_batch <- mat
mod_batch <- mod
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
available_features
uniques
u_idx <- 1
u <- uniques[u_idx, ]
u
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor
cor <- apply(cor, 2, function(x) Reduce("&", x))
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
mod <- data.frame(mat [ , grepl( "Cov" , names( mat  ) ) ])
mat <- mat [ , !grepl( "Cov" , names( mat  ) ) ]
get_adjustable_features_with_mod(mat, mod)
data_batch <- mat
mod_batch <- mod
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
u_idx <- 1
u <- uniques[u_idx, ]
u
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor
data_batch[cor,]
get_adjustable_features(data_batch[cor,])
u_idx <- 2
u <- uniques[u_idx, ]
u
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
cor
dim(mod_batch)[2]
get_adjustable_features(data_batch[cor,])
get_adjustable_features_with_mod <- function(data_batch, mod_batch) {
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(uniques)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
# apply normal function
available_features <- available_features & get_adjustable_features(data_batch[cor,])
}
available_features
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(uniques)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
# apply normal function
available_features <- available_features & get_adjustable_features(data_batch[cor,])
}
available_features
devtools::load_all()
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(uniques)){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
af <- get_adjustable_features(data_batch[cor,])
print(u)
print(af)
# apply normal function
available_features <- available_features & af
}
length(uniques)
uniques
dim(uniques)
devtool::load_all()
devtools::load_all()
devtools::test()
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(dim(uniques)[1])){
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
af <- get_adjustable_features(data_batch[cor,])
print(u)
print(af)
# apply normal function
available_features <- available_features & af
}
uniques
dim(uniques)[1]
1:3
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
# set
for(u_idx in 1:length(dim(uniques)[1])){
print(u_idx)
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
af <- get_adjustable_features(data_batch[cor,])
print(u_idx)
print(af)
# apply normal function
available_features <- available_features & af
}
uniques
1:length(dim(uniques)[1]
1:length(dim(uniques)[1])
# unique covs
uniques <- unique(mod_batch)
# default true
available_features <- seq(TRUE, TRUE, length.out=dim(data_batch)[2])
for(u_idx in 1:dim(uniques)[1]){
print(u_idx)
# the respective unique comb. of covariables
u <- uniques[u_idx, ]
# samples to select
cor <- apply(mod_batch, 1, function(x, y) x==y, u)
if(dim(mod_batch)[2]!=1){
cor <- apply(cor, 2, function(x) Reduce("&", x))
}
af <- get_adjustable_features(data_batch[cor,])
print(u_idx)
print(af)
# apply normal function
available_features <- available_features & af
}
devtools::load_all()
devtools::test()
NA==NA
devtools::load_all()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
mat
formatted_df <- format_DF(mat)
devtools::load_all()
formatted_df <- format_DF(mat)
devtools::load_all()
formatted_df <- format_DF(mat)
devtools::load_all
devtools::load_all()
formatted_df <- format_DF(mat)
devtools::load_all()
formatted_df <- format_DF(mat)
formatted_df
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/Study/RealData")
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/BERT/BERT")
devtool::install()
devtools::install()
setwd("~/PhD/HierarchyBEs/Study/RealData")
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
dataset_adjusted
# load raw data
data <- read.csv(file = "mouse_raw.tsv", row.names=1, header=TRUE, sep = "\t")
data[is.na(data)] <- NA
data <- t(data)
data <- data.frame(data)
data["Batch"] <- c(1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4)
data["Label"] <- c(1, 2, NA, 2, 2, 2, 2, 1, 1, NA, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1,1,1)
# exclude missing values
data <- data[!is.na(data["Label"]), ]
data
data_adjusted <- data.frame(data);
data_adjusted["Cov_1"] = data_adjusted[["Label"]]
data_adjusted
data <- data_adjusted
logging::loginfo("Formatting Data.")
if(is.matrix(data)){
logging::loginfo("Typecasting input to dataframe.")
data <- data.frame(data)
}
logging::loginfo("Replacing NaNs with NAs.")
data <- replace_missing(data)
# get names of potential covariables
cov_names <- names(data)[grepl( "Cov" , names( data  ) )]
cat_names <- names(data)[names(data) %in% c("Label", "Batch")]
all_names <- c(cov_names, cat_names)
if(length(all_names)==1){
if(!is.character(data[1, all_names])){
all_names <- character(0)
}
}else{
dtypes <- sapply(data[, all_names], typeof)
all_names <- all_names[dtypes=="character"]
}
if (length(all_names>0)){
logging::logwarn(paste("Identified", length(all_names),
"categorical variables among batch, label and all covariates. Note that BERT requires integer values there. Will apply ordinal encoding."))
for(n in all_names){
data[, n] <- ordinal_encode(data[[n]])
}
}
logging::loginfo("Removing potential empty rows and columns")
`%>%` <- janitor::`%>%`
data <- data %>% janitor::remove_empty(c("rows", "cols"))
# count number of missing values
inital_mvs <- sum(is.na(data))
logging::loginfo(paste("Found ", inital_mvs, " missing values."))
# all unique batch levels
unique_batches <- unique(data[["Batch"]])
# select covariates
mod <- data.frame(data [ , grepl( "Cov" , names( data  ) ) ])
mod
b = 1
data_batch <- data[data["Batch"] == b,]
mod_batch <- mod[data["Batch"] == b,]
mod_batch
dim(mod)[2]
get_adjustable_features_with_mod(data_batch, data.frame(mod_batch))
library(BERT)
get_adjustable_features_with_mod(data_batch, data.frame(mod_batch))
BERT::get_adjustable_features_with_mod()
setwd("~/PhD/HierarchyBEs/BERT/BERT")
devtools::load_all()
get_adjustable_features_with_mod(data_batch, data.frame(mod_batch))
av <- get_adjustable_features_with_mod(data_batch, data.frame(mod_batch))
sum(av)
b = 2
data_batch <- data[data["Batch"] == b,]
mod_batch <- mod[data["Batch"] == b,]
av <- get_adjustable_features_with_mod(data_batch, data.frame(mod_batch))
sum(av)
data[data["Batch"] == b, !adjustable_batch] <- NA
data[data["Batch"] == b, !av] <- NA
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/Study/RealData")
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/BERT/BERT")
devtools::install()
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/Study/RealData")
source("~/PhD/HierarchyBEs/Study/RealData/first_test_mouse.R", echo=TRUE)
setwd("~/PhD/HierarchyBEs/BERT/BERT")
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
formatted_df <- format_DF(mat)
formatted_df
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat["Cov_1"] <- c(1,1,1,2,2)
mat[1,4] <- NA
mat[4,1] <- NA
formatted_df <- format_DF(mat)
is.na(mat[,1])
mat
devtools::load_all()
devtools::test()
devtools::install()
any(c(FALSE, TRUE))
devtools::load_all()
devtools::test()
mat <- matrix(rnorm(5*5), nrow=5, ncol=5)
mat <- data.frame(mat)
mat["Batch"] <- c(1,1,1,1,1)
mat[1,4] <- NA
mat[4,1] <- NA
formatted_df <- format_DF(mat)
formatted_df
mat
all.equal(is.na(mat), is.na(formatted_df))
is.na(formatted_df)
is.na(mat)
all.equal(as.matrix(is.na(mat)), as.matrix(is.na(formatted_df)))
all.equal(mat, formatted_df)
devtools::load_all()
devtools::test()
