compute_asw_cov(test, 2)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test, 2)
numerical_data <- test [ , !grepl( "Cov" , names( test  ) ) ]
name <- paste("Cov", 1, sep="_")
cond0_idx <- which(test[[name]]==0)
cond1_idx <- which(test[[name]]==1)
test[cond0_idx, "Cov_1"]
test$Cov_1
test[Cov_1]
test["Cov_1"]
test[cond0_idx, "Cov_1"]
test[cond0_idx, ]
cond1_idx
View(test)
which(dataset[name]==0)
which(test[name]==0)
which(test[[name]]==0)
test
name
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
test <- generateDataCovariables(6000, 5, 10, 0.1, 2, 2, 0.35)
test_adjusted <- hierarchical_adjustment(test)
test_adh
test_adjusted$Cov_1
test$Cov_1
test$Cov_2
test_adjusted$Cov_2
compute_asw_cov(test, 2)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test, 2)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test, 2)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test, 2)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
test
test$Cov_1
cond0_idx <- which(test[["Cov_1"]]==0)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test, 2)
compute_asw_cov(test_adjusted, 2)
test <- generateDataCovariables(6000, 5, 10, 0.1, 2, 2, 0.5)
test <- generateDataCovariables(6000, 5, 10, 0.1, 2, 1, 0.5)
test_adjusted <- hierarchical_adjustment(test)
compute_asw(test_adjusted)
compute_asw_cov(test_adjusted, 1)
test_adjusted
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
compute_asw_cov(test_adjusted, 1)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/MissingValueScaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/MissingValueScaling.R", echo=TRUE)
View(result_df)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
test <- generateDataCovariables(1000, 8, 10, 0.1, 0.3)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
test <- generateDataCovariables(1000, 8, 10, 0.1, 0.3)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R", echo=TRUE)
test_adjusted = hierarchical_adjustment(test)
compute_asw(test_adjusted)
compute_asw(tes)
compute_asw(test)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R", echo=TRUE)
imb = 0.2
features <- 6000
batches <- 20
samplesperbatch <- 20
core = 1
method <- "ComBat"
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
mv <- 0.2
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
View(dataset)
dataset["Label"]==1
length(which(dataset["Label"]==1))
a <- rnorm(features, mean=0, sd=1)
bix <- matrix(unlist(rnorm(features*2, mean=0, sd=1)), nrow=features, ncol=2)
potential_classes <- 1:2
classvector <- sample(potential_classes, batches*samplesperbatch, replace = TRUE)
batchvector <- to_vec(for(i in 1:(batches*samplesperbatch)) (i %% batches)+1)
batchvector
b ) 1
b <- 1
rnorm(1)>0
prob1 <- 1-0.2
prob2 <- 1-prob1
indices = which(batchvector==b)
length(indices)
sample(c(1,2), size = length(indices), replace = TRUE, prob = c(prob1, prob2))
classvector[indices] = sample(c(1,2), size = length(indices), replace = TRUE, prob = c(prob1, prob2))
classvector[indices]
values <- matrix(0, ncol=features, nrow=batches*samplesperbatch)
for(i in 1:(batches*samplesperbatch)){
values[i,] <- a + bix[, classvector[i]]
}
dim(values)
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
length(which(dataset["Label"]==1))
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, 0.1)
length(which(dataset["Label"]==1))
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, 0.1)
length(which(dataset["Label"]==1))
features = 100
batches = 2
samplesperbatch = 20
mvstmt = 0.2
imbalcov = 0.1
a <- rnorm(features, mean=0, sd=1)
bix <- matrix(unlist(rnorm(features*2, mean=0, sd=1)), nrow=features, ncol=2)
potential_classes <- 1:2
classvector <- sample(potential_classes, batches*samplesperbatch, replace = TRUE)
batchvector <- to_vec(for(i in 1:(batches*samplesperbatch)) (i %% batches)+1)
# make classes unbalanced
for(b in batchvector){
if(rnorm(1)>0){
prob1 <- imbalcov
}else{
prob1 <- 1-imbalcov
}
prob2 <- 1-prob1
indices = which(batchvector==b)
classvector[indices] = sample(c(1,2), size = length(indices), replace = TRUE, prob = c(prob1, prob2))
a <- rnorm(features, mean=0, sd=1)
bix <- matrix(unlist(rnorm(features*2, mean=0, sd=1)), nrow=features, ncol=2)
potential_classes <- 1:2
classvector <- sample(potential_classes, batches*samplesperbatch, replace = TRUE)
batchvector <- to_vec(for(i in 1:(batches*samplesperbatch)) (i %% batches)+1)
# make classes unbalanced
for(b in batchvector){
if(rnorm(1)>0){
prob1 <- imbalcov
}else{
prob1 <- 1-imbalcov
}
prob2 <- 1-prob1
indices = which(batchvector==b)
classvector[indices] = sample(c(1,2), size = length(indices), replace = TRUE, prob = c(prob1, prob2))
}
classvector
values <- matrix(0, ncol=features, nrow=batches*samplesperbatch)
# fill with data
for(i in 1:(batches*samplesperbatch)){
values[i,] <- a + bix[, classvector[i]]
}
# now add batch effects
# add some noise --> e.g. biological variation
noise <- matrix(unlist(rnorm(features*batches*samplesperbatch, mean=0, sd=0.1)), nrow=batches*samplesperbatch, ncol=features)
for(b in unique(batchvector)){
proteinshift <- rnorm(features, mean=0, sd=1)
proteinscale <- rinvgamma(features, shape=5, rate = 2)
for(index in which(batchvector==b)){
values[index, ] <- proteinshift + values[index, ] + proteinscale*noise[index, ]
}
}
values <- values + noise
# introduce missing values
for(b in unique(batchvector)){
missingindices = sample(1:features, round(mvstmt*features, digits = 0))
batch_indices = which(batchvector==b)
values[batch_indices, missingindices] <- NA
}
finaldf <- data.frame(values)
finaldf["Batch"] <- batchvector
finaldf["Label"] <- classvector
finaldf["Cov_1"] <- classvector
finaldf
test <- generateDataCovariables(100, 2, 20, 0.2, 0.2)
test$Cov_1
test$Label
test <- generateDataCovariables(100, 2, 20, 0.2, 0.3)
test$Cov_1
test$Label
imb = 0.2
features = 100
batches = 2
samplesperbatch = 20
generateDataCovariables(features, batches, samplesperbatch, mv, imb)
test <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
test
test$Cov_1
test <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
test$Cov_1
test <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
test$Cov_1
dataset_nocov <- strip_Covariable(dataset)
dataset_nocov
dim(dataset_nocov)
batches
samplesperbatch
dim(dataset)
generateDataCovariables(features, batches, samplesperbatch, mv, imb)
dim(generateDataCovariables(features, batches, samplesperbatch, mv, imb))
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
dataset$Cov_1
dataset_nocov <- strip_Covariable(dataset)
result_df <- data.frame(Repetition=integer(), imbalance = double(),
algorithm=character(),
method = character(), runtime = double(),
ASWLabel = double(), ASWBatch = double())
asws <- compute_asw(dataset)
numericValues <- count_existing(dataset)
result_df[nrow(result_df) + 1,] = c(rep, imb, "raw", "raw", 0.0, asws$Label, asws$Batch)
rep = 1
asws <- compute_asw(dataset)
numericValues <- count_existing(dataset)
result_df[nrow(result_df) + 1,] = c(rep, imb, "raw", "raw", 0.0, asws$Label, asws$Batch)
method = "ComBat"
# BERT with Cov
total_start <- Sys.time()
dataset_adjusted <- hierarchical_adjustment(dataset, core, method=method)
total_end <- Sys.time()
asws <- compute_asw(dataset_adjusted)
numericValues <- count_existing(dataset_adjusted)
execution_time <- as.numeric(as.POSIXct(total_end,origin = "1970-01-01")) - as.numeric(as.POSIXct(total_start,origin = "1970-01-01"))
result_df[nrow(result_df) + 1,] = c(rep, imb, "BERT_Cov", method, execution_time, asws$Label, asws$Batch)
# BERT without Cov
total_start <- Sys.time()
dataset_adjusted <- hierarchical_adjustment(dataset_nocov, core, method=method)
total_end <- Sys.time()
asws <- compute_asw(dataset_adjusted)
numericValues <- count_existing(dataset_adjusted)
execution_time <- as.numeric(as.POSIXct(total_end,origin = "1970-01-01")) - as.numeric(as.POSIXct(total_start,origin = "1970-01-01"))
result_df[nrow(result_df) + 1,] = c(rep, imb, "BERT", method, execution_time, asws$Label, asws$Batch)
# HarmonizR
# order by batch
dataset_ordered <- dataset_nocov[order(dataset_nocov$Batch), ]
dataset_numeric <- t(dataset_ordered[,!names(dataset_ordered) %in% c("Batch", "Label")])
dataset_description <- dataset_ordered["Batch"]
names(dataset_description)[names(dataset_description) == 'Batch'] <- 'batch'
dataset_description["sample"] <- 1:(dim(dataset_numeric)[2])
dataset_description["ID"] <- colnames(dataset_numeric)
dataset_description <- dataset_description[c("ID", "sample", "batch")]
total_start <- Sys.time()
dataset_adjusted <- harmonizR(dataset_numeric, dataset_description, cores = core, algorithm = method)
total_end <- Sys.time()
dataset_adjusted <- t(dataset_adjusted)
dataset_adjusted <- data.frame(dataset_adjusted)
dataset_adjusted["Batch"] <- dataset_description[["batch"]]
dataset_adjusted["Label"] <- dataset_ordered[["Label"]]
asws <- compute_asw(dataset_adjusted)
numericValues <- count_existing(dataset_adjusted)
execution_time <- as.numeric(as.POSIXct(total_end,origin = "1970-01-01")) - as.numeric(as.POSIXct(total_start,origin = "1970-01-01"))
result_df[nrow(result_df) + 1,] = c(rep, imb, "HarmonizR", method, execution_time, asws$Label, asws$Batch)
library("HarmonizR")
# HarmonizR
# order by batch
dataset_ordered <- dataset_nocov[order(dataset_nocov$Batch), ]
dataset_numeric <- t(dataset_ordered[,!names(dataset_ordered) %in% c("Batch", "Label")])
dataset_description <- dataset_ordered["Batch"]
names(dataset_description)[names(dataset_description) == 'Batch'] <- 'batch'
dataset_description["sample"] <- 1:(dim(dataset_numeric)[2])
dataset_description["ID"] <- colnames(dataset_numeric)
dataset_description <- dataset_description[c("ID", "sample", "batch")]
total_start <- Sys.time()
dataset_adjusted <- harmonizR(dataset_numeric, dataset_description, cores = core, algorithm = method)
total_end <- Sys.time()
dataset_adjusted <- t(dataset_adjusted)
dataset_adjusted <- data.frame(dataset_adjusted)
dataset_adjusted["Batch"] <- dataset_description[["batch"]]
dataset_adjusted["Label"] <- dataset_ordered[["Label"]]
asws <- compute_asw(dataset_adjusted)
numericValues <- count_existing(dataset_adjusted)
execution_time <- as.numeric(as.POSIXct(total_end,origin = "1970-01-01")) - as.numeric(as.POSIXct(total_start,origin = "1970-01-01"))
result_df[nrow(result_df) + 1,] = c(rep, imb, "HarmonizR", method, execution_time, asws$Label, asws$Batch)
View(result_df)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
View(result_df)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
result_df
View(result_df)
dataset_nocov
dataset_adjusted_nocov <- hierarchical_adjustment(dataset_nocov, core, method="limma")
dataset_adjusted <- hierarchical_adjustment(dataset, core, method="limma")
compute_asw(dataset_adjusted)
compute_asw(dataset_adjusted_nocov)
dataset_adjusted
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R", echo=TRUE)
source("~/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R", echo=TRUE)
source(
"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R"
)
source(
"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R"
)
library(HarmonizR)
options(digits.secs = 6)
#######
features <- 800
batches <- 8
samplesperbatch <- 80
imbalance <- seq(0.1, 0.5, length.out = 3)
mv <- 0.1
core <- 1
adjustment_method <- c("ComBat", "limma")
repetitions <- 10
imb = 0.1
dataset <- generateDataCovariables(features, batches, samplesperbatch, mv, imb)
dataset_nocov <- strip_Covariable(dataset)
dataset_adjusted <- hierarchical_adjustment(dataset, core, method="limma")
dataset_adjusted_nocov <- hierarchical_adjustment(dataset_nocov, core, method="limma")
dataset_adjusted
dataset_adjusted_nocov
compute_asw(dataset_adjusted)
compute_asw(dataset_adjusted_nocov)
source("~/PhD/HierarchyBEs/Study/ParameterStudies/CovariableScaling.R", echo=TRUE)
count_matrix <- matrix(rnbinom(400, size=10, prob=0.1), nrow=50, ncol=8)
batch <- c(rep(1, 4), rep(2, 4))
batch
count_matrix
dim(count_matrix)
count_matrix[1:5, which(batch==2)[1:2]]
count_matrix[1:5, which(batch==2)[1:2]] = NA
count_matrix
group <- rep(c(0,1), 4)
adjusted_counts <- ComBat_seq(count_matrix, batch=batch, group=NULL, full_mod=FALSE)
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
version
source(
"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R"
)
source(
"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R"
)
library(HarmonizR)
packageVersion()
sessionInfo()
library("devtools")
devtools::install("C:/Users/Yannis Schumann/Downloads/HarmonizR-HarmonizR-1.1/HarmonizR-HarmonizR-1.1/HarmonizR")
devtools::install("C:/Users/Yannis Schumann/Downloads/HarmonizR-HarmonizR-1.1/HarmonizR-HarmonizR-1.1/HarmonizR")
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
devtools::install("C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/HarmonizR/HarmonizR")
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
View(dataset_description)
dataset_description[3]
dataset_description[2]
dataset_description[1]
View(dataset_numeric)
View(dataset_numeric)
sapply(dataset_description, class)
sapply(dataset_numeric, class)
as.integer(dataset_description["Batch"])
as.integer(dataset_description["batch"])
as.integer(dataset_description[["batch"]])
dataset_description["batch"] <- as.integer(dataset_description[["batch"]])
sapply(dataset_numeric, class)
sapply(dataset_description, class)
source("~/PhD/HierarchyBEs/Study/Scaling/strongscaling.R", echo=TRUE)
source("C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/hierarchical_adjustment.R")
source(
"C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/TreeBasedBatchEffectRemoval/generate_Dataset.R"
)
library(HarmonizR)
data <- read.csv(file = "C:/Users/Yannis Schumann/Documents/PhD/HierarchyBEs/Data/Petralia/petralia.csv", row.names=1, header=TRUE)
asw_raw = compute_asw(data)
data_adjusted <- data.frame(data);
data_adjusted["Cov_1"] = data_adjusted[["Label"]]
View(data_adjusted)
source("~/PhD/HierarchyBEs/Tests/Petralia/first_test_petralia.R", echo=TRUE)
View(asw_bert_cov)
source("~/PhD/HierarchyBEs/Tests/BRCA/first_test_BRCA.R", echo=TRUE)
View(asw_bert_cov)
data("pbmc_small")
library("seurat")
library(seurat)
source("~/PhD/HierarchyBEs/Tests/Petralia/first_test_petralia.R", echo=TRUE)
asw_limma
source("~/PhD/HierarchyBEs/Tests/BRCA/first_test_BRCA.R", echo=TRUE)
asw_bert
asw_limma
matrix(1,5,1)
matrix(1,5,1)[1]
as.factor(c(1,1,2,2))
batch <- as.factor(c(1,1,2,2))
contrasts(batch)
contr.sum(levels(batch))
contrasts(batch) <- contr.sum(levels(batch))
batch
model.matrix(~batch)
model.matrix(~batch)[,-1,drop=FALSE]
batch <- model.matrix(~batch)[,-1,drop=FALSE]
matrix(1,4,1)
design <- matrix(1,4,1)
cbind(design, batch)
y <- matrix(rnorm(10*9),10,9)
y[,1:3] <- y[,1:3] + 5
batch <- c("A","A","A","B","B","B","C","C","C")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch <- as.factor(batch)
batch
contr.sum(levels(batch))
contrasts(batch) <- contr.sum(levels(batch))
batch
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
matrix(1,ncol(y),1)
design <- matrix(1,ncol(y),1)
x
y
lmFit(y, cbind(design, batch))
y <- matrix(rnorm(10*9),10,9)
y[,1:3] <- y[,1:3] + 5
batch <- c("A","A","A","B","B","B","C","C","C")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
lmFit(y, cbind(design, batch))
fit <- lmFit(y, cbind(design, batch))
fit$coefficients
fit$coefficients[, -(1:ncol(matrix(1,ncol(x),1))), drop=FALSE]
fit$coefficients[, -(1:ncol(matrix(1,ncol(y),1))), drop=FALSE]
beta <- fit$coefficients[, -(1:ncol(matrix(1,ncol(y),1))), drop=FALSE]
beta %*% t(batch)
batch <- c("A","A","A","B","B","B","C","C","C")
batch
batch <- as.factor(batch)
batch
contrasts(batch) <- contr.sum(levels(batch))
batch
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
batch <- c("A","A","A","B","B","B","C","C","C", "D", "D", "D")
batch <- as.factor(batch)
contrasts(batch) <- contr.sum(levels(batch))
batch <- model.matrix(~batch)[,-1,drop=FALSE]
batch
beta
source("~/PhD/HierarchyBEs/Study/BulkExpression/ovarian_analysis.R", echo=TRUE)
data["Label"]
source("~/PhD/HierarchyBEs/Study/BulkExpression/ovarian_analysis.R", echo=TRUE)
ßMATCH
?match
is.na(NA)
setwd("~/PhD/HierarchyBEs/BERT")
devtools::install("BERT")
devtools::test("BERT")
"([0-9]*\.[0-9]*)test"
regex("([0-9]*\.[0-9]*)test")
testthat::expect_output(print("12.1Hui"), "([0-9]*\.[0-9]*)test")
testthat::expect_output(print("12.1Hui"), "([0-9]*.[0-9]*)test")
testthat::expect_output(print("12.1Hui"), "[0-9]*.[0-9]*test")
testthat::expect_output(print("12.1Hui"), "[0-9]*\\.[0-9]*test")
testthat::expect_output(print("12.1Hui"), "[0-9]*?\\.[0-9]*test")
testthat::expect_output(print("12.1Hui"), "[0-9]\\*?\\.[0-9]*test")
testthat::expect_output(print("ASW Batch was 0.11 prior to batch effect correction and is now", 0.22."), "\D*[0-9]*\.[0-9]*\D*[0-9]*\.[0-9]*\D*")
testthat::expect_output(print("ASW Batch was 0.11 prior to batch effect correction and is now 0.22."), "\D*[0-9]*\.[0-9]*\D*[0-9]*\.[0-9]*\D*")
testthat::expect_output(print("ASW Batch was 0.11 prior to batch effect correction and is now 0.22."), "\\D*[0-9]*\\.[0-9]*\\D*[0-9]*\\.[0-9]*\\D*")
testthat::expect_output(print("ASW Batch was 0.11 prior to batch effect correction and is now 0.22."), "ASW Batch was [0-9]*\\.[0-9]*\\D*[0-9]*\\.[0-9]*\\D*")
devtools::load_all()
devtools::load_all("BERT")
devtools::test("BERT")
devtools::load_all("BERT")
devtools::test("BERT")
devtools::load_all("BERT")
devtools::test("BERT")
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y["Label"] <- c(0,1,2,0,1,2,0,1,2)
y <- as.matrix(y)
rownames(y) <- c("A","B","C","D","E","F","G","H","I")
colnames(y) <- c("A1","B2","C3","D4","E5","F6","G7","H8","I9","J10", "Batch", "Label")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "ASW Label was [0-9]*\\.[0-9]*\\D*[0-9]*\\.[0-9]*\\D*")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\D*ASW Label was [0-9]*\\.[0-9]*\\D*[0-9]*\\.[0-9]*\\D*")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\D*ASW Label was [0-9]*\\.[0-9]*\\D*[0-9]*\\.[0-9]*\\D*")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\w*ASW Label was\\w*")
devtools::load_all("BERT")
devtools::test("BERT")
y <- matrix(rnorm(10*9),9,10)
y <- data.frame(y)
y["Batch"] <- c(1,1,1,2,2,2,3,3,3)
y["Label"] <- c(0,1,2,0,1,2,0,1,2)
y <- as.matrix(y)
rownames(y) <- c("A","B","C","D","E","F","G","H","I")
colnames(y) <- c("A1","B2","C3","D4","E5","F6","G7","H8","I9","J10", "Batch", "Label")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\w*ASW Label was\\*")
hierarchical_adjustment(y, method="None", qualitycontrol = TRUE)
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\w*ASW Label was\\*")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\w*ASW Label was\\*")
expect_output(hierarchical_adjustment(y, method="None", qualitycontrol = TRUE), "\\w*ASW Label was\\w*")
devtools::load_all("BERT")
devtools::test("BERT")
setwd("~/PhD/HierarchyBEs/Study/RealData")
library(BERT)
library(HarmonizR)
# load raw data
data <- read.csv(file = "petralia.csv", row.names=1, header=TRUE)
numeric_raw <- count_existing(data)
asw_raw = compute_asw(data)
print(paste("Raw data contains", numeric_raw, "numeric values. ASW Batch=", asw_raw$Batch, ", ASW Label=", asw_raw$Label))
data["Cov_1"] = data["Label"]
data_adjusted <- data.frame(data);
hierarchical_adjustment(data_adjusted, 1)
setwd("~/PhD/HierarchyBEs/BERT/BERT")
devtools::install()
